import Head from 'next/head'
import Image from 'next/image'
import { Poppins } from 'next/font/google'
import styles from '@/styles/Home.module.css'
import { useMediaQuery } from 'react-responsive'
import { Box, Button, Center, Flex, FormControl, FormErrorMessage, FormHelperText, HStack, IconButton, Input, Menu, MenuButton, MenuItem, MenuList, Text } from '@chakra-ui/react'
import { useEffect, useState } from 'react'

const poppins = Poppins({weight:['500', '700'], subsets: ['latin'] })
type pair = {
  url : string,
  shortened : string
}

export default function Home() {
  const isMobile = useMediaQuery({query: '(max-width:375px)'})
  const [anchor, setAnchor] = useState('');
  const [short, setShort] = useState<pair[]>([])
  const [isCopied, setIsCopied] = useState(Array(short.length).fill("Copy"))
  const initialText = "Copy"
  const [btnText, setBtnText] = useState('Copy')
  const [err, setErr] = useState('')
  const addToshort = (ayatLs:pair) => {
    if(short.length >= 5) short.shift()
    setShort([...short, ayatLs])
    setIsCopied([...isCopied, "Copy"])
  }
  
  useEffect(() => {
    if (short.length === 0) return
    localStorage.setItem('shortened', JSON.stringify(short))
  }, [short])

  useEffect(() => {
    const stored = localStorage.getItem('shortened')

    const parsedBookmark =
      stored !== null
      ? JSON.parse(stored)
      : []

    setShort(parsedBookmark)
    setIsCopied(Array(short.length).fill("Copy"))
  }, [])
  useEffect(() => { 
    if(btnText !== initialText){
      setTimeout(() => setBtnText(initialText), 2000)
    }
  }, [btnText])
  const changeText = (text:string) => setBtnText(text);
  
  function shorten(){
    if(anchor ===""){
      setErr("Please add a link...")
    }else{
      if(short.find(c => c.url === anchor) === undefined){
        fetch("https://api.shrtco.de/v2/shorten?url="+anchor)
        .then((res)=>res.json())
        .then((data)=>{
          if(data.ok === true){
            addToshort({url:data.result.original_link,shortened:data.result.short_link })
          }else{
            setErr("please add a valid link")
          }
          
        })
      }
      
    }
    
  }
  
  const kopas = (url:string,i:number) =>{
    navigator.clipboard.writeText(url); 
    const temp = isCopied.slice();
    temp[i] = "Copied!"
    setIsCopied(temp)
    setTimeout(() => setIsCopied(Array(short.length).fill("Copy")), 1000)
  }
  console.log(short)
  console.log(isCopied)
  return (
    <>
      <Head>
        <title>URL Shortening</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={poppins.className}>
      <Text color="white" fontSize={40} p="10px" position="fixed">Shortly</Text>
      <Center bg="ni.darkBlue" h="100vh">
        <Box bg="ni.grayViolet" w="90%" maxW="800px" p="45px" borderRadius="20px">
          <Text fontSize="65px" fontWeight="bold" color="ni.darkViolet">Shorten your link!</Text>
          
          
          <Flex mt="50px">
            <Input borderRadius={5} height="50px" 
              placeholder="Put your link here" mr="20px"
              w="80%"
              isInvalid={err !== ""}
              errorBorderColor="ni.red"
              onKeyDown={(e)=>{if(e.key == "Enter")shorten()}}
              _focus={{borderColor:"ni.darkViolet"}}
              onChange={(e)=>{setAnchor(e.target.value); setErr("")}} />
            <Button bg="ni.cyan" color="white" _hover={{opacity:"0.8"}} height="50px"
                borderRadius="5px"
                onClick={()=>shorten()}
                >Shorten it!</Button>

            
          </Flex>
          <Text color="red">{err}</Text>
          {
            short.length > 0 && 
            <Text mt="30px" mb="15px">Below are the links you've shortened before: </Text>
          }
          {  
            short.map((item,idx)=>{
              return <Flex justifyContent="space-between" 
                        bg="ni.gray" p="5px" 
                        borderRadius="5px" mb="10px"
                        alignItems="center"
                        key={item.shortened}>
              <Text color="ni.darkBlue">{item.url}</Text>
              <Flex alignItems="center">
                <Text color="ni.violet">{item.shortened}</Text>
                <Button color="white"
                        onClick={()=>kopas(item.shortened,idx)} 
                        bg={isCopied[idx] == "Copy"? "ni.cyan":"ni.darkBlue"}
                        ml="5px">{isCopied[idx]}</Button>
                </Flex>
              </Flex>
              
            })
          }
          
          
        </Box>
      </Center>
      </main>
    </>
  )
}
